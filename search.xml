<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git常用指令</title>
    <url>/2018/07/02/Git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="Git设置用户信息"><a href="#Git设置用户信息" class="headerlink" title="Git设置用户信息"></a>Git设置用户信息</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git config --<span class="keyword">global</span> user.name <span class="string">"Your Name"</span> //设置用户名</span><br><span class="line">git config --<span class="keyword">global</span> user.email <span class="string">"Your Email"</span> //设置用户邮箱</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="Git-生成ssh密钥"><a href="#Git-生成ssh密钥" class="headerlink" title="Git 生成ssh密钥"></a>Git 生成ssh密钥</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"Your Email"</span></span><br></pre></td></tr></table></figure>

<h2 id="Git-检查ssh连接是否成功"><a href="#Git-检查ssh连接是否成功" class="headerlink" title="Git 检查ssh连接是否成功"></a>Git 检查ssh连接是否成功</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ssh -T git@主机名</span><br><span class="line">例如：</span><br><span class="line">ssh -T git@git.koal.com</span><br></pre></td></tr></table></figure>

<h2 id="Git生成仓库指令"><a href="#Git生成仓库指令" class="headerlink" title="Git生成仓库指令"></a>Git生成仓库指令</h2><p>注：提前是要先进入指定的某个文件夹下。</p>
<ul>
<li><p><strong>生成仓库</strong> :</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li>
<li><p><strong>添加文件到仓库</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git add 文件名+后缀</span><br></pre></td></tr></table></figure>
<p>也可以用一下指令一次性添加所有被修改的文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>
<p>注：add 和点之间有空格</p>
</li>
<li><p><strong>将文件添加到仓库</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">"备注信息"</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Git-关联本地仓库到远程仓库"><a href="#Git-关联本地仓库到远程仓库" class="headerlink" title="Git 关联本地仓库到远程仓库"></a>Git 关联本地仓库到远程仓库</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:linxinfu/test.git</span><br></pre></td></tr></table></figure>
<p>注：上面的地址要换成仓库独一无二的地址。</p>
<h2 id="git-push的-u-参数"><a href="#git-push的-u-参数" class="headerlink" title="git push的 -u 参数"></a>git push的 -u 参数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
<p>上面指令是将内容推送到origin主机的master分支上</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<p>以上指令是将本地的master分支推送到origin主机，同时指定origin为默认主机，以后就可以不带参数的使用<code>git push</code>。</p>
<h2 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<h2 id="文件比较"><a href="#文件比较" class="headerlink" title="文件比较"></a>文件比较</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git diff  fileName   //工作区与暂存区比较</span><br><span class="line">git diff commitId fileName  //与某一次提交进行比较</span><br><span class="line">git diff branchName fileName  //当前分支的文件与branchName 分支的文件进行比较</span><br><span class="line">git diff HEAD filepath  //工作区与HEAD ( 当前工作分支) 比较</span><br></pre></td></tr></table></figure>

<h2 id="查看提交日志"><a href="#查看提交日志" class="headerlink" title="查看提交日志"></a>查看提交日志</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>

<h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><ul>
<li><p><strong>删除工作区的文件</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git rm fireName</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>删除缓存区的文件</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git rm --cached fireName</span><br></pre></td></tr></table></figure>
<p>注：文件名后面加点表示删除所有文件</p>
</li>
</ul>
<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git branch branchName //创建分支</span><br><span class="line">git branch  //查看当前分支</span><br><span class="line">git branch -a //查看当前所有分支</span><br><span class="line">git checkout branchName  //跳到相应分支</span><br><span class="line">git checkout -b branchName //创建并跳到相应分支</span><br><span class="line">git branch -d branchName //删除分支</span><br><span class="line">git merge branchName  //合并某分支到当前分支</span><br></pre></td></tr></table></figure>
<p>注：合并分支的时候需要push一下才会更新到远程仓库。</p>
<h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git checkout -- fireName</span><br></pre></td></tr></table></figure>
<p>注：这个指令适用于撤销工作区和暂存区的修改：<br>一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；<br>一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。<br>总之，就是让这个文件回到最近一次git commit或git add时的状态。</p>
<h2 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git tag tagName  //创建标签</span><br><span class="line">git show tagName //显示标签信息</span><br><span class="line">git push origin tagName //将标签推送到远程</span><br><span class="line">git push origin --tags //一次性将所有未推送的标签推送到远程</span><br><span class="line">git tag -d tagName //删除一个本地标签</span><br><span class="line">git push origin :refs/tags/tagName //删除一个远程标签</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>BASE64编码</title>
    <url>/2018/08/20/BASE64%E7%BC%96%E7%A0%81/</url>
    <content><![CDATA[<h2 id="存在的意义"><a href="#存在的意义" class="headerlink" title="存在的意义"></a>存在的意义</h2><p>有些网络渠道并不支持所有字节的传输，例如传统邮件传输中就不支持不可见字符的传输（不可见字符不是不显示的字符，而是显示了也无法看出来，例如换行符、回车、退格等字符）。像ASCII码的控制字符就不能通过邮件传输。现在很多图片传输的过程中包含了很多不可见字符，不同的路由器对不可见字符的处理方式不一样，所以在传输中经常会出现乱码现象。Base64编码的出现能够很好的解决不可见字符的传输问题。</p>
<a id="more"></a>

<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>Base64能够将字符串编码成A-Z、a-z、”+”和”/“这64个字符，6位二进制正好能够表示完64序号，在编码过程中现将字符串转化为二进制，以3个字节（24位）位单位，划分为4个6位的小分组，每个小分组的前面补上两个0，转化成十进制后再根据对照表进行编码。</p>
<p>Base64将3个字节转变为4个字节，因此，编码后的代码量（以字节为单位）约比编码前的代码量多了1/3。如果代码量正好是3的整数倍，那么恰好多了1/3。但如果不是，那么，当多出的代码量不是3的整数倍时，代码量除以3的余数就是2或者1。转换的时候，结果不够6位的用0来补上相应的位置，之后再在6位的前面补两个0。转换完空出的结果就用就用“=”来补位，总之要保证最后编码出来得字节数是4的倍数。</p>
<h2 id="BASE64与BASE432的区别与联系"><a href="#BASE64与BASE432的区别与联系" class="headerlink" title="BASE64与BASE432的区别与联系"></a>BASE64与BASE432的区别与联系</h2><ul>
<li><p>区别主要就是空间效率的区别，base64是具有比较高的空间效率的。</p>
</li>
<li><p>联系就是大家都是一种稳定的把二进制数组变成可见字符的编码方式。</p>
</li>
<li><p>base32中StdEncoding和HexEncoding所使用的字符不同，但是具体其他区别我也不是很清楚。</p>
</li>
<li><p>base64中URLEncoding一般用于编码URL。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>MD5算法原理</title>
    <url>/2018/07/10/MD5%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h2><ul>
<li>任意长度的数据经过加密得到的MD5数据长度都是固定的。</li>
<li>对原数据进行微小的改动，的到的MD5数据都有很大的区别。</li>
<li>得到原数据和其MD5值，要找出一个具有相同MD5值的数据是非常困难的。</li>
</ul>
<a id="more"></a>

<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul>
<li><strong>一致性验证：</strong> 为文件提供“数字指纹”，进行文件校验，如果有人对文件进行了修改，这个“指纹”就会发生变化，确保下载到的文件与站点文件是一致的。</li>
<li><strong>安全访问认证：</strong> 在需要登录验证的系统中，将用户密码经过MD5加密后存储在数据库中，在用户登录时将输入的密码进行加密后与数据库比对。</li>
<li><strong>数字签名：</strong> 在双方文件传输时，进行数字签名，防止文件被篡改、交易中抵赖的情况发生。 </li>
</ul>
<h2 id="算法过程"><a href="#算法过程" class="headerlink" title="算法过程"></a>算法过程</h2><h3 id="一、填充"><a href="#一、填充" class="headerlink" title="一、填充"></a>一、填充</h3><p>对字符串进行MD5加密，需要将字符串的处理人手。MD5是以512位进行分组进行处理的，所以需要将字符串长度需要能够整除512位。所以当无法整除的需要进行填充，假设R是余下的位数，则需要填充的情况总的有以下三种：</p>
<ul>
<li><strong>R = 0 ：</strong> 此时需要填充一个512位分组，因为后面还要加入64位来记录填充前字符串长度。</li>
<li><strong>R &lt; 448 :</strong> 此时只需要填充到余数为448位就好，后面的64位用来记录长度。</li>
<li><strong>R &gt; 448 ：</strong> 此时除了将这一组填充到512位后，还需要重新增加一组512位，为64位记录长度开辟空间。</li>
</ul>
<p>填充步骤如下：</p>
<ol>
<li>在信息后面先填充一个1，其余填充0，知道满足长度除以512余数为448位；</li>
<li>在结果后面附加64位长度的二进制，记录填充前信息的长度，如果二进制表示的填充前信息长度超过64位，则取低64位。</li>
</ol>
<p>经过上面两个步骤之后，信息位长恰好是512位的整数倍，方便后面进行数据处理。</p>
<h3 id="二、链接变量"><a href="#二、链接变量" class="headerlink" title="二、链接变量"></a>二、链接变量</h3><p>初始的128位值位初始链接变量，这四个参数使用于第一轮运算，以大端字节序来表示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A = <span class="number">0x01234567</span></span><br><span class="line">B = <span class="number">0x89ABCDEF</span></span><br><span class="line">C = <span class="number">0xFEDCBA98</span></span><br><span class="line">D = <span class="number">0x76543210</span></span><br></pre></td></tr></table></figure>

<h3 id="三、四轮循环运算"><a href="#三、四轮循环运算" class="headerlink" title="三、四轮循环运算"></a>三、四轮循环运算</h3><p>每一轮循环都是以512位分组进行的，循环的次数即为分组的个数。第一分组需要将上面四个链接变量复制到另外四个变量中：A到a，B到b，C到c，D到d。从第二分组开始的变量为上一分组的运算结果，即A = a，B = b，C = c，D = d。</p>
<ol>
<li><p>四个非线性函数：<br>&amp;是与,|是或,~是非,^是异或。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">F(X,Y,Z)=(X&amp;Y)|((~X)&amp;Z)</span><br><span class="line">G(X,Y,Z)=(X&amp;Z)|(Y&amp;(~Z))</span><br><span class="line">H(X,Y,Z)=X^Y^Z</span><br><span class="line">I(X,Y,Z)=Y^(X|(~Z))</span><br></pre></td></tr></table></figure>
</li>
<li><p>设Mj表示消息的第j个子分组（从0到15），&lt;&lt;&lt;s表示循环左移s位，常数ti是4294967296*abs( sin(i) ）的整数部分，i 取值从1到64，单位是弧度。（4294967296=232）,则四种操作为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FF(a,b,c,d,Mj,s,ti)表示a=b+((a+F(b,c,d)+Mj+ti)&lt;&lt;&lt;s)</span><br><span class="line">GG(a,b,c,d,Mj,s,ti)表示a=b+((a+G(b,c,d)+Mj+ti)&lt;&lt;&lt;s)</span><br><span class="line">HH(a,b,c,d,Mj,s,ti)表示a=b+((a+H(b,c,d)+Mj+ti)&lt;&lt;&lt;s)</span><br><span class="line">II(a,b,c,d,Mj,s,ti)表示a=b+((a+I(b,c,d)+Mj+ti)&lt;&lt;&lt;s)</span><br></pre></td></tr></table></figure>
</li>
<li><p>四轮运算</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一轮</span></span><br><span class="line">a=FF(a,b,c,d,M0,<span class="number">7</span>,<span class="number">0xd76aa478</span>)</span><br><span class="line">b=FF(d,a,b,c,M1,<span class="number">12</span>,<span class="number">0xe8c7b756</span>)</span><br><span class="line">c=FF(c,d,a,b,M2,<span class="number">17</span>,<span class="number">0x242070db</span>)</span><br><span class="line">d=FF(b,c,d,a,M3,<span class="number">22</span>,<span class="number">0xc1bdceee</span>)</span><br><span class="line">a=FF(a,b,c,d,M4,<span class="number">7</span>,<span class="number">0xf57c0faf</span>)</span><br><span class="line">b=FF(d,a,b,c,M5,<span class="number">12</span>,<span class="number">0x4787c62a</span>)</span><br><span class="line">c=FF(c,d,a,b,M6,<span class="number">17</span>,<span class="number">0xa8304613</span>)</span><br><span class="line">d=FF(b,c,d,a,M7,<span class="number">22</span>,<span class="number">0xfd469501</span>)</span><br><span class="line">a=FF(a,b,c,d,M8,<span class="number">7</span>,<span class="number">0x698098d8</span>)</span><br><span class="line">b=FF(d,a,b,c,M9,<span class="number">12</span>,<span class="number">0x8b44f7af</span>)</span><br><span class="line">c=FF(c,d,a,b,M10,<span class="number">17</span>,<span class="number">0xffff5bb1</span>)</span><br><span class="line">d=FF(b,c,d,a,M11,<span class="number">22</span>,<span class="number">0x895cd7be</span>)</span><br><span class="line">a=FF(a,b,c,d,M12,<span class="number">7</span>,<span class="number">0x6b901122</span>)</span><br><span class="line">b=FF(d,a,b,c,M13,<span class="number">12</span>,<span class="number">0xfd987193</span>)</span><br><span class="line">c=FF(c,d,a,b,M14,<span class="number">17</span>,<span class="number">0xa679438e</span>)</span><br><span class="line">d=FF(b,c,d,a,M15,<span class="number">22</span>,<span class="number">0x49b40821</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 第二轮</span></span><br><span class="line">a=GG(a,b,c,d,M1,<span class="number">5</span>,<span class="number">0xf61e2562</span>)</span><br><span class="line">b=GG(d,a,b,c,M6,<span class="number">9</span>,<span class="number">0xc040b340</span>)</span><br><span class="line">c=GG(c,d,a,b,M11,<span class="number">14</span>,<span class="number">0x265e5a51</span>)</span><br><span class="line">d=GG(b,c,d,a,M0,<span class="number">20</span>,<span class="number">0xe9b6c7aa</span>)</span><br><span class="line">a=GG(a,b,c,d,M5,<span class="number">5</span>,<span class="number">0xd62f105d</span>)</span><br><span class="line">b=GG(d,a,b,c,M10,<span class="number">9</span>,<span class="number">0x02441453</span>)</span><br><span class="line">c=GG(c,d,a,b,M15,<span class="number">14</span>,<span class="number">0xd8a1e681</span>)</span><br><span class="line">d=GG(b,c,d,a,M4,<span class="number">20</span>,<span class="number">0xe7d3fbc8</span>)</span><br><span class="line">a=GG(a,b,c,d,M9,<span class="number">5</span>,<span class="number">0x21e1cde6</span>)</span><br><span class="line">b=GG(d,a,b,c,M14,<span class="number">9</span>,<span class="number">0xc33707d6</span>)</span><br><span class="line">c=GG(c,d,a,b,M3,<span class="number">14</span>,<span class="number">0xf4d50d87</span>)</span><br><span class="line">d=GG(b,c,d,a,M8,<span class="number">20</span>,<span class="number">0x455a14ed</span>)</span><br><span class="line">a=GG(a,b,c,d,M13,<span class="number">5</span>,<span class="number">0xa9e3e905</span>)</span><br><span class="line">b=GG(d,a,b,c,M2,<span class="number">9</span>,<span class="number">0xfcefa3f8</span>)</span><br><span class="line">c=GG(c,d,a,b,M7,<span class="number">14</span>,<span class="number">0x676f02d9</span>)</span><br><span class="line">d=GG(b,c,d,a,M12,<span class="number">20</span>,<span class="number">0x8d2a4c8a</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 第三轮</span></span><br><span class="line">a=HH(a,b,c,d,M5,<span class="number">4</span>,<span class="number">0xfffa3942</span>)</span><br><span class="line">b=HH(d,a,b,c,M8,<span class="number">11</span>,<span class="number">0x8771f681</span>)</span><br><span class="line">c=HH(c,d,a,b,M11,<span class="number">16</span>,<span class="number">0x6d9d6122</span>)</span><br><span class="line">d=HH(b,c,d,a,M14,<span class="number">23</span>,<span class="number">0xfde5380c</span>)</span><br><span class="line">a=HH(a,b,c,d,M1,<span class="number">4</span>,<span class="number">0xa4beea44</span>)</span><br><span class="line">b=HH(d,a,b,c,M4,<span class="number">11</span>,<span class="number">0x4bdecfa9</span>)</span><br><span class="line">c=HH(c,d,a,b,M7,<span class="number">16</span>,<span class="number">0xf6bb4b60</span>)</span><br><span class="line">d=HH(b,c,d,a,M10,<span class="number">23</span>,<span class="number">0xbebfbc70</span>)</span><br><span class="line">a=HH(a,b,c,d,M13,<span class="number">4</span>,<span class="number">0x289b7ec6</span>)</span><br><span class="line">b=HH(d,a,b,c,M0,<span class="number">11</span>,<span class="number">0xeaa127fa</span>)</span><br><span class="line">c=HH(c,d,a,b,M3,<span class="number">16</span>,<span class="number">0xd4ef3085</span>)</span><br><span class="line">d=HH(b,c,d,a,M6,<span class="number">23</span>,<span class="number">0x04881d05</span>)</span><br><span class="line">a=HH(a,b,c,d,M9,<span class="number">4</span>,<span class="number">0xd9d4d039</span>)</span><br><span class="line">b=HH(d,a,b,c,M12,<span class="number">11</span>,<span class="number">0xe6db99e5</span>)</span><br><span class="line">c=HH(c,d,a,b,M15,<span class="number">16</span>,<span class="number">0x1fa27cf8</span>)</span><br><span class="line">d=HH(b,c,d,a,M2,<span class="number">23</span>,<span class="number">0xc4ac5665</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 第四轮</span></span><br><span class="line">a=II(a,b,c,d,M0,<span class="number">6</span>,<span class="number">0xf4292244</span>)</span><br><span class="line">b=II(d,a,b,c,M7,<span class="number">10</span>,<span class="number">0x432aff97</span>)</span><br><span class="line">c=II(c,d,a,b,M14,<span class="number">15</span>,<span class="number">0xab9423a7</span>)</span><br><span class="line">d=II(b,c,d,a,M5,<span class="number">21</span>,<span class="number">0xfc93a039</span>)</span><br><span class="line">a=II(a,b,c,d,M12,<span class="number">6</span>,<span class="number">0x655b59c3</span>)</span><br><span class="line">b=II(d,a,b,c,M3,<span class="number">10</span>,<span class="number">0x8f0ccc92</span>)</span><br><span class="line">c=II(c,d,a,b,M10,<span class="number">15</span>,<span class="number">0xffeff47d</span>)</span><br><span class="line">d=II(b,c,d,a,M1,<span class="number">21</span>,<span class="number">0x85845dd1</span>)</span><br><span class="line">a=II(a,b,c,d,M8,<span class="number">6</span>,<span class="number">0x6fa87e4f</span>)</span><br><span class="line">b=II(d,a,b,c,M15,<span class="number">10</span>,<span class="number">0xfe2ce6e0</span>)</span><br><span class="line">c=II(c,d,a,b,M6,<span class="number">15</span>,<span class="number">0xa3014314</span>)</span><br><span class="line">d=II(b,c,d,a,M13,<span class="number">21</span>,<span class="number">0x4e0811a1</span>)</span><br><span class="line">a=II(a,b,c,d,M4,<span class="number">6</span>,<span class="number">0xf7537e82</span>)</span><br><span class="line">b=II(d,a,b,c,M11,<span class="number">10</span>,<span class="number">0xbd3af235</span>)</span><br><span class="line">c=II(c,d,a,b,M2,<span class="number">15</span>,<span class="number">0x2ad7d2bb</span>)</span><br><span class="line">d=II(b,c,d,a,M9,<span class="number">21</span>,<span class="number">0xeb86d391</span>)</span><br></pre></td></tr></table></figure>
<p>所有这些完成之后，将a、b、c、d分别在原来基础上再加上A、B、C、D。<br>即a = a + A，b = b + B，c = c + C，d = d + D<br>然后用下一分组数据继续运行以上算法。</p>
<p>4.输出<br>最后的输出是a、b、c、d的级联。</p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA创建对象的几种方式</title>
    <url>/2020/04/27/%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>Java中面向对象的编程思想贯穿整个语言，使用对象的前提就是要知道该如何创建对象。以下总结了创建对象的几种方式：</p>
<a id="more"></a>

<h2 id="关键字-“new”"><a href="#关键字-“new”" class="headerlink" title="关键字 “new”"></a>关键字 “new”</h2><p>关键字”new“是学习java接触到创建对象最简单的方式，首先拥有一个GirlFriend类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GirlFriend</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GirlFriend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GirlFriend</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时便可以通过new关键词创建出一个GirlFriend对象，在JAVA里拥有一个对象就是这么简单，不过对象都要上交给Spring了（手动狗头）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    GirlFriend girlFriend = <span class="keyword">new</span> GirlFriend();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>new是强类型方式，能够调用任何public构造，相对高效。</p>
<h2 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h2><p>Object类中定义了clone方法，可以通过对象的clone方法复制出一个对象出来。默认的clone方法是浅拷贝，如果需要实现深拷贝，需要在类中手动重写clone方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类需要实现Cloneable接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GirlFriend</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GirlFriend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GirlFriend</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GirlFriend girl1 = <span class="keyword">new</span> GirlFriend(<span class="string">"honey"</span>, <span class="number">60</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            GirlFriend girl2 = (GirlFriend) girl1.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>Java反序列化是一个能够将字节序列恢复为Java对象的过程。为了实现反序列化，GirlFriend类需要实现Serializable接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GirlFriend</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">5809782578272943999L</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GirlFriend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GirlFriend</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        GirlFriend girl = <span class="keyword">new</span> GirlFriend(<span class="string">"honey"</span>, <span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        ObjectOutputStream oo = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"./girl.txt"</span>)));</span><br><span class="line">        oo.writeObject(girl);</span><br><span class="line">        oo.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(</span><br><span class="line">                <span class="keyword">new</span> File(<span class="string">"./girl.txt"</span>)));</span><br><span class="line">        GirlFriend girl2 = (GirlFriend) ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>在运行状态中，Java的反射机制能够知道任何一个类中拥有的方法和属性。通过反射能够调用对象的方法和属性。<br>在获取Class类型之后，可以根据Class类的newInstance()方法,创建该类的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line">    Class name = Class.forName(<span class="string">"com.xinfu.GirlFriend"</span>);</span><br><span class="line">    GirlFriend girlFriend = (GirlFriend) name.newInstance();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要注意的是，newInstanfce是弱类型、低效率的方式。它只能调用无参构造函数，即默认的构造函数。</p>
]]></content>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
</search>
